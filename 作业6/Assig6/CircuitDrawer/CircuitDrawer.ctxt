#BlueJ class context
comment0.target=CircuitDrawer
comment1.params=
comment1.target=CircuitDrawer()
comment10.params=
comment10.target=void\ doSetSource()
comment10.text=Respond\ to\ the\ source\ button
comment11.params=
comment11.target=void\ doSetWire()
comment11.text=Respond\ to\ the\ wire\ button
comment12.params=
comment12.target=void\ doSetEraser()
comment12.text=Respond\ to\ the\ eraser\ button
comment13.params=v
comment13.target=void\ doSetLabel(java.lang.String)
comment13.text=Respond\ to\ the\ text\ field\ (completion\ only)
comment14.params=
comment14.target=void\ doSwitchDirection()
comment14.text=\r\n\ Respond\ to\ the\ horiz/vert\ button\ (completion\ only)\r\n\ Switches\ the\ mode\ from\ horizontal\ to\ vertical,\ or\ back\r\n\ Ideally,\ (Challenge)\ it\ should\ show\ the\ user\ what\ the\ current\ state\ is,\r\n\ eg\ by\ drawing\ a\ horizonal/vertical\ bar\ in\ the\ top\ left\ corner,\r\n\ or\ by\ calling\ setText\ on\ the\ button\ to\ change\ the\ label\r\n
comment15.params=action\ x\ y
comment15.target=void\ doMouse(java.lang.String,\ double,\ double)
comment15.text=\r\n\ Respond\ to\ mouse\ events\r\n\ When\ pressed,\ remember\ the\ position.\r\n\ When\ released,\ draw\ what\ is\ specified\ by\ current\ tool\r\n\ Uses\ the\ value\ stored\ in\ the\ field\ to\ determine\ which\ kind\ of\ component\ to\ draw\ (or\ to\ erase)\r\n\ \ It\ should\ call\ the\ drawWire,\ drawResistor,\ drawCapacitor,\ drawSource,\ drawLabel,\ \r\n\ \ or\ doErase,\ methods\ passing\ the\ x\ and\ y\ where\ the\ mouse\ was\ released.\r\n
comment16.params=stub
comment16.target=void\ drawLine(double)
comment16.text=A\ method\ for\ add\ two\ lines\ for\ the\ element
comment17.params=x\ y
comment17.target=void\ drawResistor(double,\ double)
comment17.text=\r\n\ Draw\ a\ resistor\ centered\ at\ the\ point\ x,\ y.\r\n\ (either\ a\ thin\ rectangle\ with\ short\ wires,\ or\ a\ zig-zag.)\r\n\ Core\:\ only\ horizontal\ required\r\n\ Completion\:\ horizontal\ or\ vertical\ depending\ on\ the\ mode.\r\n
comment18.params=x\ y
comment18.target=void\ drawCapacitor(double,\ double)
comment18.text=\r\n\ Draw\ a\ capacitor\ centered\ at\ the\ point\ x,\ y.\r\n\ \ (Two\ parallel\ lines\ with\ wires\ on\ each\ side)\r\n\ Core\:\ only\ horizontal\ required\r\n\ Completion\:\ horizontal\ or\ a\ vertical,\ depending\ on\ the\ mode.\r\n
comment19.params=x\ y
comment19.target=void\ drawSource(double,\ double)
comment19.text=\r\n\ Draw\ a\ source\ centered\ at\ the\ point\ x,\ y.\r\n\ \ (Circle\ with\ wires\ on\ each\ side)\r\n\ Core\:\ only\ horizontal\ required\r\n\ Completion\:\ horizontal\ or\ vertical,\ depending\ on\ the\ mode.\r\n
comment2.params=name\ controller
comment2.target=javax.swing.JButton\ addButton(java.lang.String,\ ecs100.UIButtonListener)
comment20.params=x\ y
comment20.target=void\ drawWire(double,\ double)
comment20.text=\r\n\ Draw\ a\ wire\ from\ the\ point\ where\ the\ user\ pressed\ the\ mouse\ to\ the\ point\ x,y.\r\n\ Core\:\ may\ be\ a\ straight\ line.\r\n\ Completion\:\ The\ wire\ should\ have\ a\ horizontal\ part\ followed\ by\ a\ vertical\ part\r\n\ If\ the\ distance\ between\ the\ two\ points\ is\ very\ small,\ it\ just\ puts\ a\ circle\ at\ (x\ y)\r\n
comment21.params=x\ y
comment21.target=void\ doErase(double,\ double)
comment21.text=\r\n\ Erase\ a\ circular\ region\ around\ the\ position\ x,\ y\r\n\ Should\ be\ big\ enough\ to\ erase\ a\ single\ component.\r\n
comment22.params=x\ y
comment22.target=void\ drawLabel(double,\ double)
comment22.text=\r\n\ Draw\ a\ label\ at\ position\ x,\ y.\ \ Always\ horizontal.\r\n\ Uses\ the\ label\ that\ was\ stored\ in\ a\ field.\r\n\ Completion\ only.\r\n
comment23.params=arguments
comment23.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=void\ onLoad()
comment4.params=evt
comment4.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment5.params=
comment5.target=void\ setupGUI()
comment5.text=Sets\ up\ the\ user\ interface\ -\ mouselistener,\ buttons,\ and\ (completion\ only)\ textField
comment6.params=
comment6.target=void\ changeColor()
comment6.text=Change\ Color\ when\ button\ was\ clicked
comment7.params=width
comment7.target=void\ doSetEraseWidth(double)
comment7.text=Respond\ to\ the\ setLineWidth
comment8.params=
comment8.target=void\ doSetResistor()
comment8.text=Respond\ to\ the\ resistor\ button
comment9.params=
comment9.target=void\ doSetCapacitor()
comment9.text=Respond\ to\ the\ capacitor\ button
numComments=24
